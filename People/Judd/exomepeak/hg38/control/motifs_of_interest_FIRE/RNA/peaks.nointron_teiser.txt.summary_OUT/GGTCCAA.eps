%!PS-Adobe-3.0 EPSF-1.2
%%Title: (peaks.nointron_teiser.txt_FIRE/RNA/peaks.nointron_teiser.txt.summary_OUT/GGTCCAA.eps)
%%LanguageLevel: 1
%%Creator: PostScript::Simple perl module version 0.07
%%CreationDate: Wed Feb  5 02:54:46 2020
%%For: abe
%%Orientation: Portrait
%%BoundingBox: 0 0 589 204
%%EndComments
%%BeginProlog
/ll 1 def systemdict /languagelevel known {
/ll languagelevel def } if
%%BeginResource: PostScript::Simple
/ux {72 mul 72.27 div} def
/uy {72 mul 72.27 div} def
/u {72 mul 72.27 div} def
/STARTDIFFENC { mark } bind def
/ENDDIFFENC { 

% /NewEnc BaseEnc STARTDIFFENC number or glyphname ... ENDDIFFENC -
	counttomark 2 add -1 roll 256 array copy
	/TempEncode exch def
	
	% pointer for sequential encodings
	/EncodePointer 0 def
	{
		% Get the bottom object
		counttomark -1 roll
		% Is it a mark?
		dup type dup /marktype eq {
			% End of encoding
			pop pop exit
		} {
			/nametype eq {
			% Insert the name at EncodePointer 

			% and increment the pointer.
			TempEncode EncodePointer 3 -1 roll put
			/EncodePointer EncodePointer 1 add def
			} {
			% Set the EncodePointer to the number
			/EncodePointer exch def
			} ifelse
		} ifelse
	} loop	

	TempEncode def
} bind def

% Define ISO Latin1 encoding if it doesnt exist
/ISOLatin1Encoding where {
%	(ISOLatin1 exists!) =
	pop
} {
	(ISOLatin1 does not exist, creating...) =
	/ISOLatin1Encoding StandardEncoding STARTDIFFENC
		144 /dotlessi /grave /acute /circumflex /tilde 
		/macron /breve /dotaccent /dieresis /.notdef /ring 
		/cedilla /.notdef /hungarumlaut /ogonek /caron /space 
		/exclamdown /cent /sterling /currency /yen /brokenbar 
		/section /dieresis /copyright /ordfeminine 
		/guillemotleft /logicalnot /hyphen /registered 
		/macron /degree /plusminus /twosuperior 
		/threesuperior /acute /mu /paragraph /periodcentered 
		/cedilla /onesuperior /ordmasculine /guillemotright 
		/onequarter /onehalf /threequarters /questiondown 
		/Agrave /Aacute /Acircumflex /Atilde /Adieresis 
		/Aring /AE /Ccedilla /Egrave /Eacute /Ecircumflex 
		/Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
		/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde 
		/Odieresis /multiply /Oslash /Ugrave /Uacute 
		/Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
		/agrave /aacute /acircumflex /atilde /adieresis 
		/aring /ae /ccedilla /egrave /eacute /ecircumflex 
		/edieresis /igrave /iacute /icircumflex /idieresis 
		/eth /ntilde /ograve /oacute /ocircumflex /otilde 
		/odieresis /divide /oslash /ugrave /uacute 
		/ucircumflex /udieresis /yacute /thorn /ydieresis
	ENDDIFFENC
} ifelse

% Name: Re-encode Font
% Description: Creates a new font using the named encoding. 

/REENCODEFONT { % /Newfont NewEncoding /Oldfont
	findfont dup length 4 add dict
	begin
		{ % forall
			1 index /FID ne 
			2 index /UniqueID ne and
			2 index /XUID ne and
			{ def } { pop pop } ifelse
		} forall
		/Encoding exch def
		% defs for DPS
		/BitmapWidths false def
		/ExactSize 0 def
		/InBetweenSize 0 def
		/TransformedChar 0 def
		currentdict
	end
	definefont pop
} bind def

% Reencode the std fonts: 
/Courier-iso ISOLatin1Encoding /Courier REENCODEFONT
/Courier-Bold-iso ISOLatin1Encoding /Courier-Bold REENCODEFONT
/Courier-BoldOblique-iso ISOLatin1Encoding /Courier-BoldOblique REENCODEFONT
/Courier-Oblique-iso ISOLatin1Encoding /Courier-Oblique REENCODEFONT
/Helvetica-iso ISOLatin1Encoding /Helvetica REENCODEFONT
/Helvetica-Bold-iso ISOLatin1Encoding /Helvetica-Bold REENCODEFONT
/Helvetica-BoldOblique-iso ISOLatin1Encoding /Helvetica-BoldOblique REENCODEFONT
/Helvetica-Oblique-iso ISOLatin1Encoding /Helvetica-Oblique REENCODEFONT
/Times-Roman-iso ISOLatin1Encoding /Times-Roman REENCODEFONT
/Times-Bold-iso ISOLatin1Encoding /Times-Bold REENCODEFONT
/Times-BoldItalic-iso ISOLatin1Encoding /Times-BoldItalic REENCODEFONT
/Times-Italic-iso ISOLatin1Encoding /Times-Italic REENCODEFONT
/Symbol-iso ISOLatin1Encoding /Symbol REENCODEFONT
/BeginEPSF { /b4_Inc_state save def /dict_count countdictstack def
/op_count count 1 sub def userdict begin /showpage { } def 0 setgray
0 setlinecap 1 setlinewidth 0 setlinejoin 10 setmiterlimit [ ]
0 setdash newpath /languagelevel where { pop languagelevel 1 ne {
false setstrokeadjust false setoverprint } if } if } bind def
/EndEPSF { count op_count sub {pop} repeat countdictstack dict_count
sub {end} repeat b4_Inc_state restore } bind def
%%EndResource
%%EndProlog
BeginEPSF
0 ux 0 uy translate
1 ux 1 uy scale
1 1 scale
0 0 translate
newpath 0 0 moveto
592 0 lineto 592 205 lineto
0 205 lineto closepath clip newpath
%%BeginDocument: peaks.nointron_teiser.txt_FIRE/RNA/peaks.nointron_teiser.txt.summary_OUT/GGTCCAA.eps
%!PS-Adobe-3.0 EPSF-1.2
%%Title: (peaks.nointron_teiser.txt_FIRE/RNA/peaks.nointron_teiser.txt.summary_OUT/GGTCCAA.eps)
%%LanguageLevel: 1
%%Creator: PostScript::Simple perl module version 0.07
%%CreationDate: Wed Feb  5 02:54:46 2020
%%For: abe
%%Orientation: Portrait
%%BoundingBox: 0 0 592 205
%%EndComments
%%BeginProlog
/ll 1 def systemdict /languagelevel known {
/ll languagelevel def } if
%%BeginResource: PostScript::Simple
/ux {72 mul 72.27 div} def
/uy {72 mul 72.27 div} def
/u {72 mul 72.27 div} def
/STARTDIFFENC { mark } bind def
/ENDDIFFENC { 

% /NewEnc BaseEnc STARTDIFFENC number or glyphname ... ENDDIFFENC -
	counttomark 2 add -1 roll 256 array copy
	/TempEncode exch def
	
	% pointer for sequential encodings
	/EncodePointer 0 def
	{
		% Get the bottom object
		counttomark -1 roll
		% Is it a mark?
		dup type dup /marktype eq {
			% End of encoding
			pop pop exit
		} {
			/nametype eq {
			% Insert the name at EncodePointer 

			% and increment the pointer.
			TempEncode EncodePointer 3 -1 roll put
			/EncodePointer EncodePointer 1 add def
			} {
			% Set the EncodePointer to the number
			/EncodePointer exch def
			} ifelse
		} ifelse
	} loop	

	TempEncode def
} bind def

% Define ISO Latin1 encoding if it doesnt exist
/ISOLatin1Encoding where {
%	(ISOLatin1 exists!) =
	pop
} {
	(ISOLatin1 does not exist, creating...) =
	/ISOLatin1Encoding StandardEncoding STARTDIFFENC
		144 /dotlessi /grave /acute /circumflex /tilde 
		/macron /breve /dotaccent /dieresis /.notdef /ring 
		/cedilla /.notdef /hungarumlaut /ogonek /caron /space 
		/exclamdown /cent /sterling /currency /yen /brokenbar 
		/section /dieresis /copyright /ordfeminine 
		/guillemotleft /logicalnot /hyphen /registered 
		/macron /degree /plusminus /twosuperior 
		/threesuperior /acute /mu /paragraph /periodcentered 
		/cedilla /onesuperior /ordmasculine /guillemotright 
		/onequarter /onehalf /threequarters /questiondown 
		/Agrave /Aacute /Acircumflex /Atilde /Adieresis 
		/Aring /AE /Ccedilla /Egrave /Eacute /Ecircumflex 
		/Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
		/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde 
		/Odieresis /multiply /Oslash /Ugrave /Uacute 
		/Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
		/agrave /aacute /acircumflex /atilde /adieresis 
		/aring /ae /ccedilla /egrave /eacute /ecircumflex 
		/edieresis /igrave /iacute /icircumflex /idieresis 
		/eth /ntilde /ograve /oacute /ocircumflex /otilde 
		/odieresis /divide /oslash /ugrave /uacute 
		/ucircumflex /udieresis /yacute /thorn /ydieresis
	ENDDIFFENC
} ifelse

% Name: Re-encode Font
% Description: Creates a new font using the named encoding. 

/REENCODEFONT { % /Newfont NewEncoding /Oldfont
	findfont dup length 4 add dict
	begin
		{ % forall
			1 index /FID ne 
			2 index /UniqueID ne and
			2 index /XUID ne and
			{ def } { pop pop } ifelse
		} forall
		/Encoding exch def
		% defs for DPS
		/BitmapWidths false def
		/ExactSize 0 def
		/InBetweenSize 0 def
		/TransformedChar 0 def
		currentdict
	end
	definefont pop
} bind def

% Reencode the std fonts: 
/Courier-iso ISOLatin1Encoding /Courier REENCODEFONT
/Courier-Bold-iso ISOLatin1Encoding /Courier-Bold REENCODEFONT
/Courier-BoldOblique-iso ISOLatin1Encoding /Courier-BoldOblique REENCODEFONT
/Courier-Oblique-iso ISOLatin1Encoding /Courier-Oblique REENCODEFONT
/Helvetica-iso ISOLatin1Encoding /Helvetica REENCODEFONT
/Helvetica-Bold-iso ISOLatin1Encoding /Helvetica-Bold REENCODEFONT
/Helvetica-BoldOblique-iso ISOLatin1Encoding /Helvetica-BoldOblique REENCODEFONT
/Helvetica-Oblique-iso ISOLatin1Encoding /Helvetica-Oblique REENCODEFONT
/Times-Roman-iso ISOLatin1Encoding /Times-Roman REENCODEFONT
/Times-Bold-iso ISOLatin1Encoding /Times-Bold REENCODEFONT
/Times-BoldItalic-iso ISOLatin1Encoding /Times-BoldItalic REENCODEFONT
/Times-Italic-iso ISOLatin1Encoding /Times-Italic REENCODEFONT
/Symbol-iso ISOLatin1Encoding /Symbol REENCODEFONT
/BeginEPSF { /b4_Inc_state save def /dict_count countdictstack def
/op_count count 1 sub def userdict begin /showpage { } def 0 setgray
0 setlinecap 1 setlinewidth 0 setlinejoin 10 setmiterlimit [ ]
0 setdash newpath /languagelevel where { pop languagelevel 1 ne {
false setstrokeadjust false setoverprint } if } if } bind def
/EndEPSF { count op_count sub {pop} repeat countdictstack dict_count
sub {end} repeat b4_Inc_state restore } bind def
%%EndResource
%%EndProlog
0.5 u setlinewidth
BeginEPSF
217.5 ux 116 uy translate
1 ux 1 uy scale
newpath 0 0 moveto
141 0 lineto 141 85 lineto
0 85 lineto closepath clip newpath
%%BeginDocument: 37780.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Title: Sequence Logo : 
%%Creator: 
%%CreationDate: 
%%BoundingBox:   0  0  141  85 
%%Pages: 0
%%DocumentFonts: 
%%EndComments

% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * no name
% * NUCLEOTIDE ALIGNMENT


% ---- CONSTANTS ----
/cmfactor 72 2.54 div def % defines points -> cm conversion
/cm {cmfactor mul} bind def % defines centimeters


% ---- VARIABLES ----

/black [0 0 0] def
/red [0.8 0 0] def
/green [0 0.8 0] def
/blue [0 0 0.8] def
/yellow [1 0.7 1.0] def
/purple [0.8 0 0.8] def
/orange [1 0.7 0] def


/logoWidth 5 cm def
/logoHeight 3 cm def
/logoTitle () def

/yaxis true def
/yaxisLabel (bits) def
/yaxisBits  2 def % bits
/yaxisTicBits 1 def


/xaxis true def
/xaxisLabel () def
/showEnds (-) def % d: DNA, p: PROTEIN, -: none

/showFineprint true def
/fineprint () def

/charsPerLine 9 def
/logoLines 1 def

/showingBox (n) def    %n s f
/shrinking false def
/shrink  1 def
/outline false def

/IbeamFraction  1 def
/IbeamGray      0.50 def
/IbeamLineWidth 0.5 def

/fontsize       12 def
/titleFontsize  14 def
/smallFontsize   6 def

/defaultColor black def 

% Standard DNA/RNA color scheme
/colorDict << 
   (G)  orange
   (T)  red   
   (C)  blue  
   (A)  green 
   (U)  red   

>> def

% Standard DNA/RNA color scheme
% /colorDict << 
%   (G)  orange
%   (T)  red   
%   (C)  blue  
%   (A)  green 
%   (U)  red   
% >> def

% Standard Amino Acid colors
%/colorDict << 
%  (G)  green  
%  (S)  green  
%  (T)  green  
%  (Y)  green  
%  (C)  green  
%  (N)  purple 
%  (Q)  purple 
%  (K)  blue   
%  (R)  blue   
%  (H)  blue   
%  (D)  red    
%  (E)  red    
%  (P)  black  
%  (A)  black  
%  (W)  black  
%  (F)  black  
%  (L)  black  
%  (I)  black  
%  (M)  black  
%  (V)  black  
%>> def



% ---- DERIVED PARAMETERS ----

/leftMargin
  fontsize 3.5 mul

def 

/bottomMargin
  fontsize 0.75 mul

  % Add extra room for axis
  xaxis {fontsize 1.75 mul add } if
  xaxisLabel () eq {} {fontsize 0.75 mul add} ifelse
def


/topMargin 
  logoTitle () eq { 10 }{titleFontsize 4 add} ifelse
def

/rightMargin 
  %Add extra room if showing ends
  showEnds (-) eq { fontsize}{fontsize 1.5 mul} ifelse
def

/yaxisHeight 
  logoHeight 
  bottomMargin sub  
  topMargin sub
def

/ticWidth fontsize 2 div def

/pointsPerBit yaxisHeight yaxisBits div  def

/isBoxed 
  showingBox (s) eq
  showingBox (f) eq or { 
    true
  } {
    false
  } ifelse
def

/stackMargin 1 def

% Do not add space aroung characters if characters are boxed
/charRightMargin 
  isBoxed { 0.0 } {stackMargin} ifelse
def

/charTopMargin 
  isBoxed { 0.0 } {stackMargin} ifelse
def

/charWidth
  logoWidth
  leftMargin sub
  rightMargin sub
  charsPerLine div
  charRightMargin sub
def

/charWidth4 charWidth 4 div def
/charWidth2 charWidth 2 div def

/stackWidth 
  charWidth charRightMargin add
def
 
/numberFontsize 
  fontsize charWidth lt {fontsize}{charWidth} ifelse
def

% movements to place 5'/N and 3'/C symbols
/leftEndDeltaX  fontsize neg         def
/leftEndDeltaY  fontsize 1.5 mul neg def
/rightEndDeltaX fontsize 0.25 mul     def
/rightEndDeltaY leftEndDeltaY        def

% Outline width is proporional to charWidth, 
% but no less that 1 point
/outlinewidth 
  charWidth 32 div dup 1 gt  {}{pop 1} ifelse
def


% ---- PROCEDURES ----

/StartLogo { 
  % Save state
  save 
  gsave 

  % Print Logo Title, top center 
  gsave 
    SetTitleFont

    logoWidth 2 div
    logoTitle
    stringwidth pop 2 div sub
    logoHeight logoLines mul  
    titleFontsize sub
    moveto

    logoTitle
    show
  grestore

  % Print X-axis label, bottom center
  gsave
    SetStringFont

    logoWidth 2 div
    xaxisLabel stringwidth pop 2 div sub
    fontsize 3 div
    moveto

    xaxisLabel
    show
  grestore

  % Show Fine Print
  showFineprint {
    gsave
      SetSmallFont
      logoWidth
        fineprint stringwidth pop sub
        smallFontsize sub
          smallFontsize 3 div
      moveto
    
      fineprint show
    grestore
  } if

  % Move to lower left corner of last line, first stack
  leftMargin bottomMargin translate

  % Move above first line ready for StartLine 
  0 logoLines logoHeight mul translate

  SetLogoFont
} bind def

/EndLogo { 
  grestore 
  showpage 
  restore 
} bind def


/StartLine{ 
  % move down to the bottom of the line:
  0 logoHeight neg translate
  
  gsave 
    yaxis { MakeYaxis } if
    xaxis { ShowLeftEnd } if
} bind def

/EndLine{ 
    xaxis { ShowRightEnd } if
  grestore 
} bind def


/MakeYaxis {
  gsave    
    stackMargin neg 0 translate
    ShowYaxisBar
    ShowYaxisLabel
  grestore
} bind def


/ShowYaxisBar { 
  gsave  
    SetStringFont

    /str 10 string def % string to hold number  
    /smallgap stackMargin 2 div def

    % Draw first tic and bar
    gsave    
      ticWidth neg 0 moveto 
      ticWidth 0 rlineto 
      0 yaxisHeight rlineto
      stroke
    grestore

   
    % Draw the tics
    % initial increment limit proc for
    0 yaxisTicBits yaxisBits abs %cvi
    {/loopnumber exch def

      % convert the number coming from the loop to a string
      % and find its width
      loopnumber 10 str cvrs
      /stringnumber exch def % string representing the number

      stringnumber stringwidth pop
      /numberwidth exch def % width of number to show

      /halfnumberheight
         stringnumber CharBoxHeight 2 div
      def

      numberwidth % move back width of number
      neg loopnumber pointsPerBit mul % shift on y axis
      halfnumberheight sub % down half the digit

      moveto % move back the width of the string

      ticWidth neg smallgap sub % Move back a bit more  
      0 rmoveto % move back the width of the tic  

      stringnumber show
      smallgap 0 rmoveto % Make a small gap  

      % now show the tic mark
      0 halfnumberheight rmoveto % shift up again
      ticWidth 0 rlineto
      stroke
    } for
  grestore
} bind def

/ShowYaxisLabel {
  gsave
    SetStringFont

    % How far we move left depends on the size of
    % the tic labels.
    /str 10 string def % string to hold number  
    yaxisBits yaxisTicBits div cvi yaxisTicBits mul 
    str cvs stringwidth pop
    ticWidth 1.5 mul  add neg  


    yaxisHeight
    yaxisLabel stringwidth pop
    sub 2 div

    translate
    90 rotate
    0 0 moveto
    yaxisLabel show
  grestore
} bind def


/StartStack {  % <stackNumber> startstack
  xaxis {MakeNumber}{pop} ifelse
  gsave
} bind def

/EndStack {
  grestore
  stackWidth 0 translate
} bind def


% Draw a character whose height is proportional to symbol bits
/MakeSymbol{ % charbits character MakeSymbol
  gsave
    /char exch def
    /bits exch def

    /bitsHeight 
       bits pointsPerBit mul 
    def

    /charHeight 
       bitsHeight charTopMargin sub
       dup 
       0.0 gt {}{pop 0.0} ifelse % if neg replace with zero 
    def 
 
    charHeight 0.0 gt {
      char SetColor
      charWidth charHeight char ShowChar

      showingBox (s) eq { % Unfilled box
        0 0 charWidth charHeight false ShowBox
      } if

      showingBox (f) eq { % Filled box
        0 0 charWidth charHeight true ShowBox
      } if

    } if

  grestore

  0 bitsHeight translate 
} bind def


/ShowChar { % <width> <height> <char> ShowChar
  gsave
    /tc exch def    % The character
    /ysize exch def % the y size of the character
    /xsize exch def % the x size of the character

    /xmulfactor 1 def 
    /ymulfactor 1 def

  
    % if ysize is negative, make everything upside down!
    ysize 0 lt {
      % put ysize normal in this orientation
      /ysize ysize abs def
      xsize ysize translate
      180 rotate
    } if

    shrinking {
      xsize 1 shrink sub 2 div mul
        ysize 1 shrink sub 2 div mul translate 

      shrink shrink scale
    } if

    % Calculate the font scaling factors
    % Loop twice to catch small correction due to first scaling
    2 {
      gsave
        xmulfactor ymulfactor scale
      
        ysize % desired size of character in points
        tc CharBoxHeight 
        dup 0.0 ne {
          div % factor by which to scale up the character
          /ymulfactor exch def
        } % end if
        {pop pop}
        ifelse

        xsize % desired size of character in points
        tc CharBoxWidth  
        dup 0.0 ne {
          div % factor by which to scale up the character
          /xmulfactor exch def
        } % end if
        {pop pop}
        ifelse
      grestore
    } repeat

    % Adjust horizontal position if the symbol is an I
    tc (I) eq {
      charWidth 2 div % half of requested character width
      tc CharBoxWidth 2 div % half of the actual character
      sub 0 translate
      % Avoid x scaling for I 
      /xmulfactor 1 def 
    } if


    % ---- Finally, draw the character
  
    newpath
    xmulfactor ymulfactor scale

    % Move lower left corner of character to start point
    tc CharBox pop pop % llx lly : Lower left corner
    exch neg exch neg
    moveto

    outline {  % outline characters:
      outlinewidth setlinewidth
      tc true charpath
      gsave 1 setgray fill grestore
      clip stroke
    } { % regular characters
      tc show
    } ifelse

  grestore
} bind def


/ShowBox { % x1 y1 x2 y2 filled ShowBox
  gsave
    /filled exch def 
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath

    clip
    
    filled {
      fill
    }{ 
      0 setgray stroke   
    } ifelse

  grestore
} bind def


/MakeNumber { % number MakeNumber
  gsave
    SetNumberFont
    stackWidth 0 translate
    90 rotate % rotate so the number fits
    dup stringwidth pop % find the length of the number
    neg % prepare for move
    stackMargin sub % Move back a bit
    charWidth (0) CharBoxHeight % height of numbers
    sub 2 div %
    moveto % move back to provide space
    show
  grestore
} bind def


/Ibeam{ % heightInBits Ibeam
  gsave
    % Make an Ibeam of twice the given height in bits
    /height exch  pointsPerBit mul def 
    /heightDRAW height IbeamFraction mul def

    IbeamLineWidth setlinewidth
    IbeamGray setgray 

    charWidth2 height neg translate
    ShowIbar
    newpath
      0 0 moveto
      0 heightDRAW rlineto
    stroke
    newpath
      0 height moveto
      0 height rmoveto
      currentpoint translate
    ShowIbar
    newpath
    0 0 moveto
    0 heightDRAW neg rlineto
    currentpoint translate
    stroke
  grestore
} bind def


/ShowIbar { % make a horizontal bar
  gsave
    newpath
      charWidth4 neg 0 moveto
      charWidth4 0 lineto
    stroke
  grestore
} bind def


/ShowLeftEnd {
  gsave
    SetStringFont
    leftEndDeltaX leftEndDeltaY moveto
    showEnds (d) eq {(5) show ShowPrime} if
    showEnds (p) eq {(N) show} if
  grestore
} bind def


/ShowRightEnd { 
  gsave
    SetStringFont
    rightEndDeltaX rightEndDeltaY moveto
    showEnds (d) eq {(3) show ShowPrime} if
    showEnds (p) eq {(C) show} if
  grestore
} bind def


/ShowPrime {
  gsave
    SetPrimeFont
    (\242) show 
  grestore
} bind def

 
/SetColor{ % <char> SetColor
  dup colorDict exch known {
    colorDict exch get aload pop setrgbcolor
  } {
    pop
    defaultColor aload pop setrgbcolor
  } ifelse 
} bind def

% define fonts
/SetTitleFont {/Times-Bold findfont titleFontsize scalefont setfont} bind def
/SetLogoFont  {/Helvetica-Narrow-Bold findfont charWidth  scalefont setfont} bind def
/SetStringFont{/Helvetica-Bold findfont fontsize scalefont setfont} bind def
/SetPrimeFont {/Symbol findfont fontsize scalefont setfont} bind def
/SetSmallFont {/Helvetica findfont smallFontsize scalefont setfont} bind def

/SetNumberFont {
    /Helvetica-Bold findfont 
    numberFontsize
    scalefont
    setfont
} bind def

%Take a single character and return the bounding box
/CharBox { % <char> CharBox <lx> <ly> <ux> <uy>
  gsave
    newpath
    0 0 moveto
    % take the character off the stack and use it here:
    true charpath 
    flattenpath 
    pathbbox % compute bounding box of 1 pt. char => lx ly ux uy
    % the path is here, but toss it away ...
  grestore
} bind def


% The height of a characters bounding box
/CharBoxHeight { % <char> CharBoxHeight <num>
  CharBox
  exch pop sub neg exch pop
} bind def


% The width of a characters bounding box
/CharBoxWidth { % <char> CharBoxHeight <num>
  CharBox
  pop exch pop sub neg 
} bind def


% Deprecated names
/startstack {StartStack} bind  def
/endstack {EndStack}     bind def
/makenumber {MakeNumber} bind def
/numchar { MakeSymbol }  bind def

%%EndProlog

%%Page: 1 1
StartLogo
StartLine % line number 1

(1) startstack
 0.1298684869065 (G) numchar
 0.1298684869065 (C) numchar
 0.133803895600636 (A) numchar
endstack

(2) startstack
 1.97835957438667 (G) numchar
endstack

(3) startstack
 1.97835957438667 (G) numchar
endstack

(4) startstack
 1.97835957438667 (U) numchar
endstack

(5) startstack
 0.1298684869065 (U) numchar
 0.1298684869065 (G) numchar
 0.133803895600636 (C) numchar
endstack

(6) startstack
 1.97835957438667 (C) numchar
endstack

(7) startstack
 1.97835957438667 (A) numchar
endstack

(8) startstack
 1.97835957438667 (A) numchar
endstack

(9) startstack
 0 (U) numchar
 0 (G) numchar
 0 (C) numchar
 0 (A) numchar
endstack



EndLine
EndLogo

%%EOF



















%%EndDocument
EndEPSF
0.8 0 0 setrgbcolor
newpath
235.5 ux 198 uy moveto
235.5 ux 194 uy lineto 239.5 ux 196 uy lineto 235.5 ux 198 uy lineto fill
0 0 0 setrgbcolor
/Courrier findfont 8 scalefont setfont
newpath
546 ux 144 uy moveto
(300)   show stroke 
newpath
30 ux 144 uy moveto
(0)   dup stringwidth pop 2 div neg 0 rmoveto show 
0 0 0 setrgbcolor
/Courrier findfont 8 scalefont setfont
newpath
2 ux 125.5 uy moveto
(C0)   show stroke 
0 0 0 setrgbcolor
/Courrier findfont 6 scalefont setfont
newpath
550 ux 134.5 uy moveto
(ENSG00000025800-random)   show stroke 
newpath
30 ux 136 uy moveto
545 ux 136 uy lineto stroke
0.8 0 0 setrgbcolor
newpath
361.033333333333 ux 138 uy moveto
361.033333333333 ux 134 uy lineto 365.033333333333 ux 136 uy lineto 361.033333333333 ux 138 uy lineto fill
0 0 0 setrgbcolor
/Courrier findfont 6 scalefont setfont
newpath
550 ux 131.5 uy moveto
(ENSG00000083444-random)   show stroke 
newpath
30 ux 133 uy moveto
545 ux 133 uy lineto stroke
0.8 0 0 setrgbcolor
newpath
74.35 ux 135 uy moveto
74.35 ux 131 uy lineto 78.35 ux 133 uy lineto 74.35 ux 135 uy lineto fill
0 0 0 setrgbcolor
/Courrier findfont 6 scalefont setfont
newpath
550 ux 128.5 uy moveto
(ENSG00000143110-random)   show stroke 
newpath
30 ux 130 uy moveto
545 ux 130 uy lineto stroke
0.8 0 0 setrgbcolor
newpath
355.883333333333 ux 132 uy moveto
355.883333333333 ux 128 uy lineto 359.883333333333 ux 130 uy lineto 355.883333333333 ux 132 uy lineto fill
0 0 0 setrgbcolor
/Courrier findfont 6 scalefont setfont
newpath
550 ux 125.5 uy moveto
(ENSG00000157873-random)   show stroke 
newpath
30 ux 127 uy moveto
545 ux 127 uy lineto stroke
0.8 0 0 setrgbcolor
newpath
249.45 ux 129 uy moveto
249.45 ux 125 uy lineto 253.45 ux 127 uy lineto 249.45 ux 129 uy lineto fill
0 0 0 setrgbcolor
/Courrier findfont 6 scalefont setfont
newpath
550 ux 122.5 uy moveto
(ENSG00000162650-random)   show stroke 
newpath
30 ux 124 uy moveto
545 ux 124 uy lineto stroke
0.8 0 0 setrgbcolor
newpath
465.75 ux 126 uy moveto
465.75 ux 122 uy lineto 469.75 ux 124 uy lineto 465.75 ux 126 uy lineto fill
0 0 0 setrgbcolor
/Courrier findfont 6 scalefont setfont
newpath
550 ux 119.5 uy moveto
(ENSG00000163125-random)   show stroke 
newpath
30 ux 121 uy moveto
545 ux 121 uy lineto stroke
0.8 0 0 setrgbcolor
newpath
407.383333333333 ux 123 uy moveto
407.383333333333 ux 119 uy lineto 411.383333333333 ux 121 uy lineto 407.383333333333 ux 123 uy lineto fill
0 0 0 setrgbcolor
/Courrier findfont 6 scalefont setfont
newpath
550 ux 116.5 uy moveto
(ENSG00000171488-random)   show stroke 
newpath
30 ux 118 uy moveto
545 ux 118 uy lineto stroke
0.8 0 0 setrgbcolor
newpath
136.15 ux 120 uy moveto
136.15 ux 116 uy lineto 140.15 ux 118 uy lineto 136.15 ux 120 uy lineto fill
0 0 0 setrgbcolor
/Courrier findfont 8 scalefont setfont
newpath
2 ux 101.5 uy moveto
(C1)   show stroke 
0 0 0 setrgbcolor
/Courrier findfont 6 scalefont setfont
newpath
550 ux 107.5 uy moveto
(ENSG00000054118)   show stroke 
newpath
30 ux 109 uy moveto
545 ux 109 uy lineto stroke
0.8 0 0 setrgbcolor
newpath
354.166666666667 ux 111 uy moveto
354.166666666667 ux 107 uy lineto 358.166666666667 ux 109 uy lineto 354.166666666667 ux 111 uy lineto fill
0 0 0 setrgbcolor
/Courrier findfont 6 scalefont setfont
newpath
550 ux 104.5 uy moveto
(ENSG00000134186)   show stroke 
newpath
30 ux 106 uy moveto
545 ux 106 uy lineto stroke
0.8 0 0 setrgbcolor
newpath
55.4666666666667 ux 108 uy moveto
55.4666666666667 ux 104 uy lineto 59.4666666666667 ux 106 uy lineto 55.4666666666667 ux 108 uy lineto fill
0 0 0 setrgbcolor
/Courrier findfont 6 scalefont setfont
newpath
550 ux 101.5 uy moveto
(ENSG00000162775)   show stroke 
newpath
30 ux 103 uy moveto
545 ux 103 uy lineto stroke
0.8 0 0 setrgbcolor
newpath
3425.28333333333 ux 105 uy moveto
3425.28333333333 ux 101 uy lineto 3429.28333333333 ux 103 uy lineto 3425.28333333333 ux 105 uy lineto fill
0 0 0 setrgbcolor
/Courrier findfont 6 scalefont setfont
newpath
550 ux 98.5 uy moveto
(ENSG00000171488)   show stroke 
newpath
30 ux 100 uy moveto
545 ux 100 uy lineto stroke
0.8 0 0 setrgbcolor
newpath
299.233333333333 ux 102 uy moveto
299.233333333333 ux 98 uy lineto 303.233333333333 ux 100 uy lineto 299.233333333333 ux 102 uy lineto fill
0 0 0 setrgbcolor
/Courrier findfont 6 scalefont setfont
newpath
550 ux 95.5 uy moveto
(ENSG00000198890)   show stroke 
newpath
30 ux 97 uy moveto
545 ux 97 uy lineto stroke
0.8 0 0 setrgbcolor
newpath
474.333333333333 ux 99 uy moveto
474.333333333333 ux 95 uy lineto 478.333333333333 ux 97 uy lineto 474.333333333333 ux 99 uy lineto fill
%%EOF
%%EndDocument
EndEPSF
%%EOF
